"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

from numpy.random import choice
import pandas as pd
from operator import itemgetter

values = choice(20, size=10, replace=False)
keys = list(map(lambda x: 'id{}'.format(x), values))
profit = list(randint(1000, 100000, len(keys)))
data = dict(zip(keys, profit))

# Сложность такого алгоритма: O(n log n)

sorted_data = sorted(data.items(), key=lambda x: x[1], reverse=True)
print(sorted_data[0:3])

# Сложность такого алгоритма: O(m*n)

df = pd.DataFrame(list(data.items()), columns=['Keys', 'Profit'])
print(df.sort_values(by='Profit', ascending=[False])[:3])


# Сложность такого алгоритма: O(n log n)

print(sorted(data.items(), key=itemgetter(1), reverse=True)[:3])


#В данной здаче словарь сортируется по одному списку значений. Сортировка списка имеет сложность O(n log n)
#В случае перевода словаря в датафрейм сложность будет O(m*n)
#Согласно таблице и графику Big O - самые удачные по производительности решения - это решения 1 и 3. ез применения датафрейма
